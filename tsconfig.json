{
  "compilerOptions": {
    // 어떤 ES 스펙으로 컴파일할지 지정. "ESNext"로 설정하면 최신 문법 사용 가능
    "target": "ESNext",
    // 어떤 모듈 시스템을 사용할지. Vite(ESM) 환경이라면 "ESNext" 혹은 "NodeNext" 등을 사용
    "module": "ESNext",
    // Node 방식을 인식하도록 설정. "node", "nodenext" 등이 있음
    "moduleResolution": "node",

    // React JSX 처리 방식. React 17+에서 "react-jsx" 사용 가능. 그 이하 버전은 "react" 사용
    "jsx": "react-jsx",

    // 사용 가능한 라이브러리 목록. DOM API, ESNext 문법 등을 모두 사용할 수 있게 함
    "lib": ["DOM", "DOM.Iterable", "ESNext"],

    // Node API를 사용하려면 @types/node 패키지 설치 후, "types"에 "node"를 추가
    "types": ["node", "vite/client"],

    // ts, tsx에서 엄격 모드 사용 여부
    "strict": true,

    // import/export 시 호환성을 원활하게 해주는 옵션
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,

    // JSON import를 허용하고 타입을 인식시키는 옵션
    "resolveJsonModule": true,

    // JS 파일도 TS 컴파일 파이프라인에 포함시킬지 여부
    "allowJs": true,

    // 타입 선언만 하고 결과물(.js)은 내보내지 않도록 설정
    "noEmit": true,

    // (선택) 라이브러리 스킵 체크
    "skipLibCheck": true,

    // 파일명 대소문자 일관성 체크
    "forceConsistentCasingInFileNames": true,

    // (선택) isolatedModules: 각 파일을 독립 모듈로 처리
    "isolatedModules": true
  },
  "include": [
    "src", // 소스 경로
    "tests" // 테스트 폴더 (있다면)
    // "vitest.config.ts",  // 혹시 vitest 설정을 TS로 작성했다면
    // "vite.config.ts"     // vite 설정을 TS로 작성했다면
  ],
  "exclude": [
    "node_modules" // 일반적으로 제외
  ]
}
